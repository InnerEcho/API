openapi: 3.0.0
info:
  title: Leafy API
  description: Leafy 서비스의 API 명세서입니다. 식물과 교감하며 성장 일기를 기록하는 서비스입니다.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Development server

tags:
  - name: User
    description: 사용자 인증 및 정보 관련 API
  - name: Plant
    description: 사용자 식물 관련 API
  - name: Diary
    description: 성장 일기 관련 API
  - name: Comment
    description: 성장 일기 댓글 관련 API
  - name: Chat
    description: 식물과의 대화(채팅) 관련 API
  - name: ChatHistory
    description: 채팅 기록 조회 API
  - name: Friend
    description: 친구 관계 API
  - name: Mission
    description: 미션 관련 API (추가 구현 필요)
  - name: Speech
    description: 음성 서비스 (TTS/STT) 관련 API

paths:
  /user/register:
    post:
      tags:
        - User
      summary: 회원가입 (사용자 등록 및 초기 식물 생성)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /user/login:
    post:
      tags:
        - User
      summary: 로그인
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /user/emotion/{user_id}:
    get:
      tags:
        - User
      summary: 사용자 감정 조회
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 감정 조회 성공
        '404':
          $ref: '#/components/responses/NotFound'

  /plant/create:
    post:
      tags:
        - Plant
      summary: 새로운 식물 등록
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlantCreateRequest'
      responses:
        '201':
          description: 식물 등록 성공
        '400':
          $ref: '#/components/responses/BadRequest'

  /plant/all/{user_id}:
    get:
      tags:
        - Plant
      summary: 사용자의 모든 식물 목록 조회
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlantListResponse'

  /plant/detail/{plant_id}:
    get:
      tags:
        - Plant
      summary: 특정 식물 상세 정보 조회
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: plant_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlantDetailResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /plant/state/{plant_id}:
    get:
      tags:
        - Plant
      summary: 식물 상태 조회
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: plant_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 조회 성공
        '404':
          $ref: '#/components/responses/NotFound'

  /diary/create:
    post:
      tags:
        - Diary
      summary: 성장 일기 생성
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                plant_id:
                  type: integer
                content:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: 생성 성공
        '400':
          $ref: '#/components/responses/BadRequest'

  /diary/month/{user_id}/{year_month}:
    get:
      tags:
        - Diary
      summary: 월별 성장 일기 작성일 조회
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - in: path
          name: year_month
          required: true
          schema:
            type: string
            example: '2023-10'
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  dates:
                    type: array
                    items:
                      type: string
                      example: "2023-10-27"
        '400':
          $ref: '#/components/responses/BadRequest'

  /diary/date/{user_id}/{date}:
    get:
      tags:
        - Diary
      summary: 특정 날짜의 성장 일기 조회
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - in: path
          name: date
          required: true
          schema:
            type: string
            format: date
            example: '2023-10-27'
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /comment:
    post:
      tags:
        - Comment
      summary: 댓글 생성
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        '201':
          description: 생성 성공
        '400':
          $ref: '#/components/responses/BadRequest'

  /comment/{diary_id}:
    get:
      tags:
        - Comment
      summary: 특정 일기의 댓글 목록 조회
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: diary_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /comment/{comment_id}:
    put:
      tags:
        - Comment
      summary: 댓글 수정
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: comment_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: 수정 성공
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      tags:
        - Comment
      summary: 댓글 삭제
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: comment_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 삭제 성공
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
          
  /chat:
    post:
      tags:
        - Chat
      summary: 식물에게 채팅 메시지 전송
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                plant_id:
                  type: integer
                content:
                  type: string
      responses:
        '200':
          description: 메시지 전송 및 봇 응답 반환
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
  
  /history/{user_id}/{plant_id}:
    get:
      tags:
        - ChatHistory
      summary: 채팅 기록 조회
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - in: path
          name: plant_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatHistoryResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /friend/add:
    post:
      tags:
        - Friend
      summary: 친구 추가
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                friend_id:
                  type: integer
      responses:
        '201':
          description: 친구 추가 성공
        '409':
          $ref: '#/components/responses/Conflict'

  /friend/list/{user_id}:
    get:
      tags:
        - Friend
      summary: 친구 목록 조회
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendListResponse'

  /speech/tts:
    post:
      tags:
        - Speech
      summary: Text-to-Speech (TTS)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
      responses:
        '200':
          description: 오디오 파일 스트림 반환
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary

  /speech/stt:
    post:
      tags:
        - Speech
      summary: Speech-to-Text (STT)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audio:
                  type: string
                  format: binary
      responses:
        '200':
          description: 변환된 텍스트 반환

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Requests
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        nickname:
          type: string
        plantInfo:
          type: object
          properties:
            species:
              type: string
            nickname:
              type: string

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    PlantCreateRequest:
      type: object
      properties:
        user_id:
          type: integer
        species:
          type: string
        nickname:
          type: string
          
    CommentRequest:
      type: object
      properties:
        diary_id:
          type: integer
        user_id:
          type: integer
        content:
          type: string

    # Responses
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        nickname:
          type: string

    UserResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'

    LoginResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string

    Plant:
      type: object
      properties:
        id:
          type: integer
        species:
          type: string
        nickname:
          type: string
        level:
          type: integer
        
    PlantListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Plant'

    PlantDetailResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Plant'

    Diary:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        plant_id:
          type: integer
        content:
          type: string
        image_url:
          type: string
        date:
          type: string
          format: date
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    DiaryResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Diary'

    Comment:
      type: object
      properties:
        id:
          type: integer
        user:
          type: object
          properties:
            id:
              type: integer
            nickname:
              type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time

    CommentListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    ChatHistory:
      type: object
      properties:
        is_user_chat:
          type: boolean
        content:
          type: string
        createdAt:
          type: string
          format: date-time
          
    ChatHistoryResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChatHistory'
            
    Friend:
      type: object
      properties:
        id:
          type: integer
        nickname:
          type: string

    FriendListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Friend'

    Error:
      type: object
      properties:
        code:
          type: integer
        msg:
          type: string

  responses:
    BadRequest:
      description: 잘못된 요청 (파라미터 누락 또는 형식 오류)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            msg: "Invalid or missing parameters"
    Unauthorized:
      description: 인증 실패 (자격 증명 오류)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            msg: "Invalid credentials"
    Forbidden:
      description: 권한 없음 (작성자가 아님)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            msg: "Forbidden"
    NotFound:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            msg: "Not Found"
    Conflict:
      description: 충돌 발생 (데이터가 이미 존재함)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 409
            msg: "User already exists"