openapi: 3.0.1
info:
  title: InnerEcho API - (1) User
  description: InnerEcho 서비스의 사용자 인증 및 정보 조회 API 명세서입니다.
  version: 1.0.1

servers:
  - url: http://localhost:3002
    description: 로컬 개발 서버
  - url: https://leafy.wolyong.cloud
    description: 프로덕션 서버

tags:
  - name: User
    description: "🧑‍🤝‍🧑 사용자 리소스 관리 API (회원가입, 정보 조회/수정/삭제)"
  - name: Auth
    description: "🔐 인증 리소스 관리 API (로그인, 세션 발급, 이메일 인증)"
  - name: Auth V2
    description: "🔐✨ 인증 V2 API (Access Token + Refresh Token, 보안 강화)"
  - name: Emotion
    description: "😊 사용자 감정 상태 리소스 관리 API"
  - name: Plant
    description: "🌱 사용자의 식물 상태(레벨, 경험치, 호감도) 조회 API"
  - name: Chat
    description: "💬 식물 챗봇과의 대화 및 이전 대화 기록 조회 API"
  - name: Diary
    description: "📔 성장 일기 리소스 관리 API (댓글 포함)"
  - name: Friend
    description: "👥 친구 리소스 관리 API"
  - name: Mission
    description: "🎯 미션 리소스 관리 API"
  - name: Speech
    description: "🎤 음성 인식 및 합성 API (STT, TTS)"
  - name: Realtime Speech
    description: "🎙️ OpenAI Realtime API를 사용한 실시간 음성 대화 (WebSocket)"

# ===============================================================
# == Paths (Endpoints)
# ===============================================================
paths:
  # ==================== User APIs ====================
  /users:
    post:
      tags:
        - User
      summary: 사용자 생성 (회원가입)
      description: 새로운 사용자 리소스를 생성합니다. 성공 시, 해당 사용자에게 '금쪽이'라는 이름의 기본 식물도 함께 생성됩니다.
      requestBody:
        description: 회원가입에 필요한 사용자 정보
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '200':
          description: 사용자 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: 필수 필드가 누락되었거나, 이메일 또는 닉네임이 이미 존재하는 경우
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                msg: "이미 존재하는 이메일입니다."
        '500':
          $ref: '#/components/responses/ServerError'

  /users/{userId}:
    get:
      tags:
        - User
      summary: 특정 사용자 정보 조회
      description: 사용자 ID로 특정 사용자 리소스의 정보를 조회합니다.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: 조회할 사용자의 ID
      responses:
        '200':
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: 해당 사용자를 찾을 수 없음
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - User
      summary: 사용자 정보 수정
      description: 특정 사용자 리소스의 정보를 수정합니다.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                userGender:
                  type: string
                state:
                  type: string
      responses:
        '200':
          description: 사용자 정보 수정 성공
        '404':
          description: 해당 사용자를 찾을 수 없음
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - User
      summary: 사용자 삭제
      description: 특정 사용자 리소스를 삭제합니다.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 사용자 삭제 성공
        '404':
          description: 해당 사용자를 찾을 수 없음
        '500':
          $ref: '#/components/responses/ServerError'

  # ==================== Emotion APIs ====================
  /emotions:
    get:
      tags:
        - Emotion
      summary: 사용자의 현재 감정 상태 조회
      description: |
        인증된 사용자의 현재 설정된 감정(state) 값을 조회합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 감정 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      emotion:
                        type: string
                        description: "사용자의 현재 감정 상태 (예: 행복, 슬픔)"
                        example: "행복"
                  msg:
                    type: string
                    example: "Ok"
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '404':
          description: 해당 사용자를 찾을 수 없음
        '500':
          $ref: '#/components/responses/ServerError'

  # ==================== Auth APIs ====================
  /auth/sessions:
    post:
      tags:
        - Auth
      summary: 세션 생성 (로그인)
      description: 이메일과 비밀번호로 사용자를 인증하고, API 접근을 위한 JWT 토큰 리소스를 생성합니다.
      requestBody:
        description: 로그인에 필요한 이메일과 비밀번호
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: 세션 생성 성공. JWT 토큰을 반환합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: 이메일이 존재하지 않거나 비밀번호가 일치하지 않는 경우
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                msg: "비밀번호가 일치하지 않습니다."
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - Auth
      summary: 세션 검증 (JWT 토큰 유효성 검증)
      description: HTTP 헤더의 `Authorization` 필드에 담긴 JWT 토큰을 검증하고, 유효하다면 토큰에 담긴 사용자 정보를 반환합니다. (로그인 유지 확인용)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 토큰이 유효한 경우, 디코딩된 사용자 정보를 반환합니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    $ref: '#/components/schemas/DecodedToken'
                  msg:
                    type: string
                    example: "Ok"
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/verifications:
    post:
      tags:
        - Auth
      summary: 이메일 인증번호 생성 및 발송
      description: 회원가입 시 본인 인증을 위해 이메일 인증번호 리소스를 생성하고 발송합니다.
      requestBody:
        description: 인증번호를 발송할 이메일 주소
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: "인증번호를 받을 이메일 주소"
                  example: "test@example.com"
      responses:
        '200':
          description: 인증번호 발송 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: integer
                    description: "생성된 6자리 인증번호"
                    example: 123456
                  msg:
                    type: string
                    example: "SendMail"
        '500':
          $ref: '#/components/responses/ServerError'

  # ==================== Auth V2 APIs ====================
  /auth/v2/register:
    post:
      tags:
        - Auth V2
      summary: 회원가입 (Access Token + Refresh Token 발급)
      description: |
        V2 인증 시스템을 사용한 회원가입입니다.
        회원가입과 동시에 Access Token과 Refresh Token을 발급하여 즉시 로그인 상태가 됩니다.
        회원가입 시 사용자가 지정한 이름의 식물이 자동으로 생성됩니다.
        - Access Token (15분 유효): API 요청에 사용
        - Refresh Token (7일 유효): Access Token 갱신에 사용
        - Rate Limiting: 1분에 10회로 제한
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - userName
                - userGender
                - plantNickname
              properties:
                email:
                  type: string
                  format: email
                  example: "newuser@example.com"
                password:
                  type: string
                  format: password
                  example: "password123!"
                userName:
                  type: string
                  example: "홍길동"
                userGender:
                  type: string
                  example: "male"
                plantNickname:
                  type: string
                  description: "사용자가 키울 식물의 이름"
                  example: "금쪽이"
      responses:
        '201':
          description: 회원가입 성공, Access Token 및 Refresh Token 발급
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "Registration successful"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        description: "15분 유효한 Access Token"
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refreshToken:
                        type: string
                        description: "7일 유효한 Refresh Token"
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      tokenType:
                        type: string
                        example: "Bearer"
                      expiresIn:
                        type: string
                        example: "15m"
                      user:
                        type: object
                        properties:
                          userId:
                            type: integer
                            example: 1
                          userEmail:
                            type: string
                            example: "newuser@example.com"
                          userName:
                            type: string
                            example: "홍길동"
        '400':
          description: 입력값 오류 또는 이메일이 이미 존재함
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingFields:
                  value:
                    code: 400
                    message: "All fields are required"
                    error: "MISSING_FIELDS"
                emailExists:
                  value:
                    code: 400
                    message: "Email already exists"
                    error: "EMAIL_EXISTS"
        '429':
          description: 회원가입 시도 횟수 초과
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 429
                  message:
                    type: string
                    example: "Too many registration attempts, please try again later"
                  error:
                    type: string
                    example: "RATE_LIMIT_EXCEEDED"
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/v2/login:
    post:
      tags:
        - Auth V2
      summary: 로그인 (Access Token + Refresh Token 발급)
      description: |
        V2 인증 시스템을 사용한 로그인입니다.
        - Access Token (15분 유효): API 요청에 사용
        - Refresh Token (7일 유효): Access Token 갱신에 사용
        - Rate Limiting: 5분에 5회로 제한
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "innerecho@example.com"
                password:
                  type: string
                  format: password
                  example: "password123!"
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Login successful"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        description: "15분 유효한 Access Token"
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refreshToken:
                        type: string
                        description: "7일 유효한 Refresh Token"
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      tokenType:
                        type: string
                        example: "Bearer"
                      expiresIn:
                        type: string
                        example: "15m"
        '400':
          description: 이메일 또는 비밀번호 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                emailNotExist:
                  value:
                    code: 400
                    message: "Email does not exist"
                    error: "NOT_EXIST_EMAIL"
                incorrectPassword:
                  value:
                    code: 400
                    message: "Incorrect password"
                    error: "INCORRECT_PASSWORD"
        '429':
          description: 로그인 시도 횟수 초과
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 429
                  message:
                    type: string
                    example: "Too many login attempts, please try again after 5 minutes"
                  error:
                    type: string
                    example: "RATE_LIMIT_EXCEEDED"
                  retryAfter:
                    type: string
                    example: "300 seconds"
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/v2/refresh:
    post:
      tags:
        - Auth V2
      summary: Access Token 갱신
      description: |
        Refresh Token을 사용하여 새로운 Access Token을 발급받습니다.
        Access Token이 만료되었을 때 사용합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: "로그인 시 발급받은 Refresh Token"
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: 토큰 갱신 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Token refreshed successfully"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        description: "새로 발급된 Access Token"
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      tokenType:
                        type: string
                        example: "Bearer"
                      expiresIn:
                        type: string
                        example: "15m"
        '401':
          description: Refresh Token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 401
                  message:
                    type: string
                  error:
                    type: string
              examples:
                expired:
                  value:
                    code: 401
                    message: "Refresh token has expired"
                    error: "REFRESH_TOKEN_EXPIRED"
                revoked:
                  value:
                    code: 401
                    message: "Refresh token has been revoked"
                    error: "REFRESH_TOKEN_REVOKED"
                invalid:
                  value:
                    code: 401
                    message: "Invalid refresh token"
                    error: "INVALID_REFRESH_TOKEN"
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/v2/logout:
    post:
      tags:
        - Auth V2
      summary: 로그아웃
      description: |
        현재 Access Token과 Refresh Token을 무효화합니다.
        로그아웃 후에는 해당 토큰들을 사용할 수 없습니다.
      security:
        - BearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: "무효화할 Refresh Token (선택사항)"
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Logged out successfully"
        '400':
          description: Access Token이 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Access token is required in Authorization header"
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/v2/verify:
    get:
      tags:
        - Auth V2
      summary: 토큰 검증 및 사용자 정보 조회
      description: |
        현재 Access Token이 유효한지 검증하고, 토큰에 포함된 사용자 정보를 반환합니다.
        로그인 상태 확인 및 사용자 정보 조회에 사용합니다.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 토큰이 유효함
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Token is valid"
                  data:
                    type: object
                    properties:
                      userId:
                        type: integer
                        example: 1
                      userEmail:
                        type: string
                        example: "innerecho@example.com"
                      userName:
                        type: string
                        example: "김Inner"
                      state:
                        type: string
                        example: "중립"
        '401':
          description: 토큰이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 401
                  message:
                    type: string
                  error:
                    type: string
              examples:
                expired:
                  value:
                    code: 401
                    message: "Access token has expired"
                    error: "TOKEN_EXPIRED"
                revoked:
                  value:
                    code: 401
                    message: "Token has been revoked (logged out)"
                    error: "TOKEN_REVOKED"
                invalid:
                  value:
                    code: 401
                    message: "Invalid token format"
                    error: "INVALID_TOKEN"

  /auth/v2/revoke-all:
    post:
      tags:
        - Auth V2
      summary: 모든 세션 무효화 (강제 로그아웃)
      description: |
        현재 사용자의 모든 Refresh Token을 무효화하여 모든 디바이스에서 강제 로그아웃합니다.
        보안 위협이 감지되었을 때 사용합니다.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 모든 세션 무효화 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "All sessions have been revoked"
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: "Authentication required"
        '500':
          $ref: '#/components/responses/ServerError'


  # -------------------- Plant State APIs --------------------
  /plant:
    get:
      tags:
        - Plant
      summary: 사용자의 식물 목록 조회
      description: |
        인증된 사용자가 소유한 식물 정보를 조회합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 식물 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      plantId:
                        type: integer
                        description: 식물 고유 ID
                        example: 1
                      plantName:
                        type: string
                        description: 식물 이름 (닉네임)
                        example: "금쪽이"
                      level:
                        type: integer
                        description: 식물 레벨
                        example: 5
                      experience:
                        type: integer
                        description: 현재 경험치
                        example: 120
                      likeability:
                        type: integer
                        description: 호감도 (0-100)
                        example: 75
                  msg:
                    type: string
                    example: "Ok"
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 401
                  msg:
                    type: string
                    example: "Unauthorized"
        '404':
          description: 해당 사용자의 식물을 찾을 수 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  msg:
                    type: string
                    example: "Plant not found"
        '500':
          $ref: '#/components/responses/ServerError'

  /plant/state/{plantId}:
    get:
      tags:
        - Plant
      summary: 식물의 현재 상태 조회
      description: |
        식물의 ID를 이용해 해당 식물의 이름, 레벨, 경험치, 호감도를 포함한 종합적인 상태 정보를 조회합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: plantId
          required: true
          schema:
            type: integer
          description: 조회할 식물의 고유 ID
          example: 1
      responses:
        '200':
          description: 식물 상태 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      plantName:
                        type: string
                        description: 식물 이름 (닉네임)
                        example: "금쪽이"
                      level:
                        type: integer
                        description: 식물 레벨
                        example: 5
                      experience:
                        type: integer
                        description: 현재 경험치
                        example: 120
                      likeability:
                        type: integer
                        description: 호감도 (0-100)
                        example: 75
                  msg:
                    type: string
                    example: "Ok"
        '400':
          description: 잘못된 plantId
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  msg:
                    type: string
                    example: "Invalid plant ID"
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '403':
          description: 해당 식물에 대한 접근 권한 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 403
                  msg:
                    type: string
                    example: "Access denied"
        '404':
          description: 해당 식물을 찾을 수 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  msg:
                    type: string
                    example: "Plant not found"
        '500':
          $ref: '#/components/responses/ServerError'

  /plant/state/{plantId}/experience:
    post:
      tags:
        - Plant
      summary: 식물 경험치 획득
      description: |
        식물에게 경험치를 부여하고, 자동으로 레벨업을 처리합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: plantId
          required: true
          schema:
            type: integer
          description: 경험치를 부여할 식물의 ID
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - expGained
              properties:
                expGained:
                  type: number
                  description: 획득할 경험치 양
                  example: 50
      responses:
        '200':
          description: 경험치 획득 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      level:
                        type: integer
                        description: 현재 레벨
                        example: 6
                      experience:
                        type: integer
                        description: 현재 경험치
                        example: 20
                      leveledUp:
                        type: boolean
                        description: 레벨업 여부
                        example: true
                  msg:
                    type: string
                    example: "Ok"
        '400':
          description: 잘못된 입력 데이터
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '403':
          description: 해당 식물에 대한 접근 권한 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 403
                  msg:
                    type: string
                    example: "Access denied"
        '404':
          description: 해당 식물을 찾을 수 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  msg:
                    type: string
                    example: "Plant not found"
        '500':
          $ref: '#/components/responses/ServerError'

  /plant/state/{plantId}/likeability:
    post:
      tags:
        - Plant
      summary: 식물 호감도 증가
      description: |
        식물의 호감도를 증가시킵니다. 최대 100까지 증가합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: plantId
          required: true
          schema:
            type: integer
          description: 호감도를 증가시킬 식물의 ID
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: number
                  description: 증가시킬 호감도 양
                  example: 10
      responses:
        '200':
          description: 호감도 증가 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      likeability:
                        type: integer
                        description: 현재 호감도
                        example: 85
                  msg:
                    type: string
                    example: "Ok"
        '400':
          description: 잘못된 입력 데이터
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '403':
          description: 해당 식물에 대한 접근 권한 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 403
                  msg:
                    type: string
                    example: "Access denied"
        '404':
          description: 해당 식물을 찾을 수 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  msg:
                    type: string
                    example: "Plant not found"
        '500':
          $ref: '#/components/responses/ServerError'

  # -------------------- Chat APIs --------------------
  /chat/plant:
    post:
      tags:
        - Chat
      summary: 식물 챗봇과 대화하기
      description: |
        사용자가 식물에게 메시지를 보내고, 챗봇의 응답을 받습니다. 이전 대화 기록을 바탕으로 답변이 생성되며, 모든 대화는 DB에 기록됩니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      requestBody:
        description: 챗봇에게 보낼 메시지와 식물 정보 (userId는 토큰에서 자동 추출)
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - plantId
                - message
              properties:
                plantId:
                  type: integer
                  description: "대화할 식물 ID"
                  example: 1
                message:
                  type: string
                  description: "사용자가 입력한 메시지"
                  example: "오늘 하루 어땠어?"
                emotion:
                  type: string
                  description: "(선택) 사용자의 현재 감정 상태. 챗봇 답변에 영향을 줄 수 있습니다."
                  nullable: true
                  example: "행복"
      responses:
        '200':
          description: 챗봇의 응답 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '404':
          description: 요청에 포함된 사용자나 식물을 찾을 수 없는 경우
        '500':
          $ref: '#/components/responses/ServerError'

  /chat/history/{plantId}:
    get:
      tags:
        - Chat
      summary: 특정 식물과의 채팅 기록 조회
      description: |
        인증된 사용자와 특정 식물 간의 전체 대화 기록을 시간 순으로 조회합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: plantId
          required: true
          schema:
            type: integer
          description: 대화 기록을 조회할 식물 ID
          example: 1
      responses:
        '200':
          description: 채팅 기록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatHistory'
                  msg:
                    type: string
                    example: "Ok"
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'


  # ==================== Diary APIs ====================
  /diaries/create:
    post:
      tags:
        - Diary
      summary: 성장 일기 생성 (챗봇 기반)
      description: |
        일기 리소스를 생성합니다. 사용자와 챗봇의 하루 대화 기록을 바탕으로 새로운 성장 일기를 생성하며, 같은 날짜에 다시 요청하면 기존 일기를 업데이트합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      requestBody:
        description: 일기 생성을 위한 식물 정보 및 트리거 메시지 (userId는 토큰에서 자동 추출)
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [plantId, message]
              properties:
                plantId:
                  type: integer
                  example: 1
                message:
                  type: string
                  example: "오늘 하루를 일기로 만들어줘."
      responses:
        '200':
          description: 일기 생성 또는 업데이트 성공. 생성/업데이트된 일기 데이터를 반환합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryResponse'
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

  /diaries/month/{yearMonth}:
    get:
      tags:
        - Diary
      summary: 월별 일기 날짜 목록 조회
      description: |
        인증된 사용자가 특정 월에 작성한 일기의 날짜 목록을 조회합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: yearMonth
          required: true
          schema:
            type: string
          description: "조회할 연월 (YYYY-MM 형식)"
          example: "2025-10"
      responses:
        '200':
          description: 날짜 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      type: string
                      format: date
                      example: "2025-10-01"
                  msg:
                    type: string
                    example: "Ok"
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

  /diaries/date/{date}:
    get:
      tags:
        - Diary
      summary: 특정 날짜의 일기 조회
      description: |
        인증된 사용자가 지정된 날짜(YYYY-MM-DD)에 작성한 일기 리소스를 조회합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: date
          required: true
          schema:
            type: string
            format: date
          description: "조회할 날짜 (YYYY-MM-DD 형식)"
          example: "2025-10-01"
      responses:
        '200':
          description: 일기 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryResponse'
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '404':
          description: 해당 날짜에 작성된 일기가 없음
        '500':
          $ref: '#/components/responses/ServerError'

  # ==================== Comment APIs (Diary의 하위 리소스) ====================
  /diaries/{diaryId}/comments:
    get:
      tags:
        - Diary
      summary: 특정 일기의 댓글 목록 조회
      description: |
        특정 일기에 속한 댓글 리소스 컬렉션을 조회합니다.
        Comment는 Diary의 하위 리소스입니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: diaryId
          required: true
          schema:
            type: integer
          description: "댓글을 조회할 일기의 ID"
          example: 10
      responses:
        '200':
          description: 댓글 목록 조회 성공. 댓글 객체의 배열을 반환합니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GrowthDiaryComment'
                  msg:
                    type: string
                    example: "Ok"
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags:
        - Diary
      summary: 댓글 생성
      description: |
        특정 일기에 새로운 댓글 리소스를 생성합니다.
        Comment는 Diary의 하위 리소스입니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: diaryId
          required: true
          schema:
            type: integer
          description: "댓글이 달릴 일기의 ID"
          example: 10
      requestBody:
        description: 댓글 내용 (userId와 diaryId는 토큰 및 URL에서 자동 추출)
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
                  description: "댓글 내용"
                  example: "좋은 글이네요!"
      responses:
        '200':
          description: 댓글 작성 성공. 생성된 댓글 객체를 반환합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

  /diaries/{diaryId}/comments/{commentId}:
    put:
      tags:
        - Diary
      summary: 댓글 수정
      description: |
        특정 댓글 리소스의 내용을 수정합니다.
        Comment는 Diary의 하위 리소스입니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: diaryId
          required: true
          schema:
            type: integer
          description: "댓글이 속한 일기의 ID"
          example: 10
        - in: path
          name: commentId
          required: true
          schema:
            type: integer
          description: "수정할 댓글의 ID"
          example: 25
      requestBody:
        description: 수정할 댓글의 내용 (userId, diaryId, commentId는 토큰 및 URL에서 자동 추출)
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
                  description: "수정할 댓글 내용"
                  example: "수정된 댓글 내용입니다!"
      responses:
        '200':
          description: 댓글 수정 성공. 수정된 댓글 객체를 반환합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Diary
      summary: 댓글 삭제
      description: |
        특정 댓글 리소스를 삭제합니다.
        Comment는 Diary의 하위 리소스입니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: diaryId
          required: true
          schema:
            type: integer
          description: "댓글이 속한 일기의 ID"
          example: 10
        - in: path
          name: commentId
          required: true
          schema:
            type: integer
          description: "삭제할 댓글의 ID"
          example: 25
      responses:
        '200':
          description: 댓글 삭제 성공. 별도의 데이터 없이 성공 메시지만 반환합니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 200 }
                  msg: { type: string, example: "Ok" }
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'


  # ==================== Friend APIs ====================
  /friends/friendslist:
    get:
      tags:
        - Friend
      summary: 친구 목록 조회
      description: |
        인증된 사용자의 친구 목록을 조회합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 친구 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FriendInfo'
                  msg:
                    type: string
                    example: "Ok"
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

  /friends/friendRequest:
    post:
      tags:
        - Friend
      summary: 친구 요청 생성
      description: |
        새로운 친구 요청을 생성합니다.
        요청을 보내는 사용자(fromUserId)는 Access Token에서 자동으로 추출됩니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [toUserId]
              properties:
                toUserId:
                  type: integer
                  description: "친구 요청을 받을 사용자 ID"
                  example: 2
      responses:
        '200':
          description: 친구 요청 생성 성공
        '400':
          description: 자기 자신에게 요청, 이미 친구이거나 요청 대기중인 경우
        '401':
          description: 인증 실패
        '404':
          description: 요청을 받는 사용자를 찾을 수 없는 경우
        '500':
          $ref: '#/components/responses/ServerError'

  /friends/requestAccept:
    post:
      tags:
        - Friend
      summary: 친구 요청 수락
      description: |
        친구 요청을 수락합니다.
        요청을 받는 사용자(toUserId)는 Access Token에서 자동으로 추출됩니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [requestId, fromUserId]
              properties:
                requestId:
                  type: integer
                  description: "수락할 친구 요청의 ID"
                  example: 1
                fromUserId:
                  type: integer
                  description: "친구 요청을 보낸 사용자 ID"
                  example: 1
      responses:
        '200':
          description: 친구 요청 수락 성공
        '400':
          description: 해당 친구 요청이 존재하지 않는 경우
        '401':
          description: 인증 실패
        '404':
          description: 사용자를 찾을 수 없는 경우
        '500':
          $ref: '#/components/responses/ServerError'

  /friends/requestReject:
    post:
      tags:
        - Friend
      summary: 친구 요청 거절
      description: |
        친구 요청을 거절합니다.
        요청을 받는 사용자(toUserId)는 Access Token에서 자동으로 추출됩니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [requestId, fromUserId]
              properties:
                requestId:
                  type: integer
                  description: "거절할 친구 요청의 ID"
                  example: 1
                fromUserId:
                  type: integer
                  description: "친구 요청을 보낸 사용자 ID"
                  example: 1
      responses:
        '200':
          description: 친구 요청 거절 성공
        '400':
          description: 해당 친구 요청이 존재하지 않는 경우
        '401':
          description: 인증 실패
        '404':
          description: 사용자를 찾을 수 없는 경우
        '500':
          $ref: '#/components/responses/ServerError'

  # -------------------- Mission APIs --------------------
  /missions:
    get:
      tags:
        - Mission
      summary: 오늘의 미션 조회
      description: |
        인증된 사용자의 오늘 날짜 미션 내용과 완료 여부를 조회합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 미션 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissionResponse'
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

  /missions/completions:
    post:
      tags:
        - Mission
      summary: 미션 완료 처리
      description: |
        사용자의 오늘의 미션을 완료 상태로 변경합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 미션 완료 처리 성공
        '400':
          description: 이미 완료된 미션인 경우
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

  /missions/water:
    post:
      tags:
        - Mission
      summary: 물 마시기 미션 완료
      description: |
        사용자의 물 마시기 미션을 완료 처리합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                missionImage:
                  type: string
                  format: binary
                  description: "미션 인증 이미지"
      responses:
        '200':
          description: 물 마시기 미션 완료
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

  /missions/smile:
    post:
      tags:
        - Mission
      summary: 미소 사진 미션 제출
      description: |
        사용자의 미소 사진을 제출하여 미션을 완료합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                smileImage:
                  type: string
                  format: binary
                  description: "미소 사진"
      responses:
        '200':
          description: 미소 사진 미션 완료
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

  /missions/chat:
    post:
      tags:
        - Mission
      summary: 식물과 대화 미션 완료
      description: |
        식물과의 대화 미션을 완료 처리합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [plantId]
              properties:
                plantId:
                  type: integer
      responses:
        '200':
          description: 대화 미션 완료
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

  /missions/stretching:
    post:
      tags:
        - Mission
      summary: 스트레칭 미션 완료
      description: |
        사용자의 스트레칭 미션을 완료 처리합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 스트레칭 미션 완료
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

  # ==================== Realtime Speech API (WebSocket) ====================
  /chat/realtime:
    get:
      tags:
        - Realtime Speech
      summary: 실시간 음성 대화 WebSocket 연결 (티켓 필요)
      description: |
        ⚠️ **이 엔드포인트는 WebSocket 프로토콜을 사용합니다.**

        Swagger UI에서 직접 테스트할 수 없으며, WebSocket 클라이언트를 사용해야 합니다.

        ## 🔐 보안 인증 흐름 (HTTP 티켓 방식)

        **중요**: 이 WebSocket에 연결하기 전에, 먼저 `POST /chat/realtime/ticket`으로 일회용 티켓을 발급받아야 합니다.

        ### 1단계: HTTPS API로 티켓 발급
        ```http
        POST /chat/realtime/ticket
        Authorization: Bearer {JWT_ACCESS_TOKEN}
        Content-Type: application/json

        {
          "plantId": 1
        }
        ```

        **응답:**
        ```json
        {
          "code": 200,
          "data": {
            "ticket": "안전한_일회용_티켓_문자열",
            "expiresIn": 30,
            "wsUrl": "wss://your-server.com/chat/realtime?ticket=..."
          }
        }
        ```

        ### 2단계: 티켓으로 WebSocket 연결
        ```javascript
        const ws = new WebSocket(wsUrl); // 또는 직접 URL 구성
        // wss://your-server.com/chat/realtime?ticket={TICKET}
        ```

        ## 🛡️ 보안 강화 포인트

        ✅ **JWT 토큰이 WebSocket을 통과하지 않음**
        - JWT는 안전한 HTTPS API로만 전송됩니다
        - 중간자 공격(MITM)으로부터 토큰 보호

        ✅ **일회용 티켓**
        - 티켓은 한 번 사용되면 즉시 삭제됩니다
        - 재사용 불가능 (Replay Attack 방어)

        ✅ **짧은 유효 시간**
        - 티켓 유효 기간: 30초
        - 타이밍 공격 방어

        ✅ **WSS(WebSocket Secure) 필수**
        - 프로덕션 환경에서는 반드시 wss:// 사용
        - 모든 WebSocket 통신 암호화

        ## 📡 연결 방법

        ### WebSocket URL 형식
        ```
        wss://your-server.com/chat/realtime?ticket={TICKET}
        ```

        ### 쿼리 파라미터
        - `ticket` (required): POST /chat/realtime/ticket에서 발급받은 일회용 티켓

        ⚠️ **중요**: 티켓은 30초 내에 사용해야 하며, 한 번만 사용할 수 있습니다.

        ## 🔄 이벤트 흐름

        ### 연결 직후 (자동)
        서버가 티켓을 검증하고 다음 메시지를 보냅니다:

        **인증 성공**
        ```json
        {
          "type": "authenticated",
          "message": "인증이 완료되었습니다."
        }
        ```

        **세션 생성 완료**
        ```json
        {
          "type": "session.created",
          "session": {
            "id": "sess_xxx",
            "model": "gpt-4o-realtime-preview-2024-12-17",
            "voice": "shimmer"
          }
        }
        ```

        ### 1. 클라이언트 → 서버 (주요 이벤트)

        **오디오 데이터 전송**
        ```json
        {
          "type": "input_audio_buffer.append",
          "audio": "base64_encoded_pcm16_audio"
        }
        ```

        **응답 생성 요청**
        ```json
        {
          "type": "response.create"
        }
        ```

        **텍스트 메시지 전송**
        ```json
        {
          "type": "conversation.item.create",
          "item": {
            "type": "message",
            "role": "user",
            "content": [{"type": "input_text", "text": "안녕하세요"}]
          }
        }
        ```

        ### 2. 서버 → 클라이언트 (주요 이벤트)

        **오디오 스트리밍 (실시간)**
        ```json
        {
          "type": "response.audio.delta",
          "delta": "base64_encoded_audio_chunk"
        }
        ```

        **음성 인식 완료**
        ```json
        {
          "type": "conversation.item.input_audio_transcription.completed",
          "transcript": "사용자가 말한 내용"
        }
        ```

        **AI 응답 완료**
        ```json
        {
          "type": "response.done",
          "response": {
            "output": [{
              "type": "message",
              "content": [{"type": "text", "text": "AI 응답"}]
            }]
          }
        }
        ```

        **에러 응답**
        ```json
        {
          "type": "error",
          "error": {
            "message": "에러 메시지",
            "code": "error_code"
          }
        }
        ```

        ## 💾 대화 히스토리
        - 연결 시 자동으로 이전 대화 20개 로드
        - 실시간으로 Redis/DB에 자동 저장
        - 세션 ID: `userId-plantId` 형식

        ## 🎨 특징
        - ✅ 실시간 양방향 오디오 스트리밍
        - ✅ 자동 음성 인식 (STT) 및 음성 합성 (TTS)
        - ✅ 식물 캐릭터 기반 맞춤형 대화
        - ✅ 대화 히스토리 자동 관리
        - ✅ 업계 표준 보안 인증 (HTTP 티켓 방식)

        ## 🔧 클라이언트 예시 (JavaScript)

        **React Native / 브라우저 / Node.js 모두 동일:**
        ```javascript
        // 1. HTTPS API로 티켓 발급 (JWT는 안전한 헤더로 전송)
        const response = await fetch('https://your-server.com/chat/realtime/ticket', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${jwt_token}`, // ✅ 안전한 HTTPS
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ plantId: 1 }),
        });

        const { data } = await response.json();
        const { ticket, wsUrl } = data;

        // 2. 티켓으로 WebSocket 연결 (wss:// 필수!)
        const ws = new WebSocket(wsUrl);

        ws.onopen = () => {
          console.log('✅ 연결 성공 (이미 인증됨)');
        };

        ws.onmessage = (event) => {
          const data = JSON.parse(event.data);
          console.log('받은 이벤트:', data.type);

          switch (data.type) {
            case 'authenticated':
              console.log('✅ 인증 완료');
              break;
            case 'response.audio.delta':
              playAudio(data.delta);
              break;
            case 'conversation.item.input_audio_transcription.completed':
              console.log('인식된 텍스트:', data.transcript);
              break;
            case 'error':
              console.error('에러:', data.error);
              break;
          }
        };

        ws.onerror = (error) => {
          console.error('WebSocket 에러:', error);
        };

        ws.onclose = () => {
          console.log('연결 종료');
        };

        // 3. 오디오 전송
        function sendAudio(audioBuffer) {
          ws.send(JSON.stringify({
            type: 'input_audio_buffer.append',
            audio: audioBuffer // Base64 encoded PCM16
          }));
        }
        ```

        ## 📚 자세한 문서
        - `REALTIME_API_GUIDE.md` - 전체 API 가이드
        - `SECURITY_WEBSOCKET.md` - 보안 설계 상세 문서
        - `REACT_NATIVE_EXAMPLE.md` - React Native 구현 예시

      parameters:
        - in: query
          name: ticket
          required: true
          schema:
            type: string
          description: "POST /chat/realtime/ticket에서 발급받은 일회용 티켓 (30초 유효)"
          example: "abc123def456ghi789jkl012mno345pqr678stu901vwx234yz"
      responses:
        '101':
          description: |
            ✅ **WebSocket 프로토콜 업그레이드 성공**

            HTTP 101 Switching Protocols 응답 후 WebSocket 연결이 설정됩니다.
            이후 JSON 형식의 이벤트를 주고받습니다.
        '400':
          description: 잘못된 요청 (ticket 누락)
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "error"
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "티켓이 필요합니다. POST /chat/realtime/ticket으로 먼저 티켓을 발급받으세요."
                      code:
                        type: string
                        example: "missing_ticket"
        '401':
          description: 인증 실패 (유효하지 않거나 만료된 티켓)
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "error"
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "유효하지 않거나 만료된 티켓입니다. 새로운 티켓을 발급받으세요."
                      code:
                        type: string
                        example: "invalid_ticket"
        '404':
          description: 식물을 찾을 수 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "error"
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "식물 정보를 찾을 수 없습니다."
                      code:
                        type: string
                        example: "plant_not_found"
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "error"
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "연결 처리 중 오류가 발생했습니다."
                      code:
                        type: string
                        example: "connection_error"

  # -------------------- Speech APIs --------------------
  /speech/stt:
    post:
      tags:
        - Speech
      summary: 음성을 텍스트로 변환 (STT)
      description: |
        OGG(Opus) 형식의 음성 파일을 받아 텍스트로 변환합니다.
        Access Token에서 userId를 자동으로 추출하여 사용합니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file, plantId]
              properties:
                file:
                  type: string
                  format: binary
                  description: "OGG_OPUS 인코딩, 16000Hz 샘플링 레이트의 음성 파일"
                plantId:
                  type: integer
                  description: "대화할 식물 ID"
                  example: 1
      responses:
        '200':
          description: STT 변환 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 200 }
                  data:
                    type: string
                    description: "변환된 텍스트"
                    example: "오늘 날씨 정말 좋다."
                  msg: { type: string, example: "Ok" }
        '400':
          description: 음성 파일이 첨부되지 않은 경우
        '401':
          description: 인증 실패 (토큰 없음 또는 유효하지 않음)
        '500':
          $ref: '#/components/responses/ServerError'

  /speech/tts:
    post:
      tags:
        - Speech
      summary: 텍스트를 음성으로 변환 (TTS)
      description: 입력된 텍스트 메시지를 OGG 형식의 음성 파일(Blob)으로 변환하여 반환합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                  description: "음성으로 변환할 텍스트"
                  example: "오늘 하루도 수고 많으셨어요."
      responses:
        '200':
          description: TTS 변환 성공. audio/ogg 형식의 Blob 데이터를 반환합니다.
          content:
            audio/ogg:
              schema:
                type: string
                format: binary
        '400':
          description: 변환할 메시지가 없는 경우
        '500':
          $ref: '#/components/responses/ServerError'


# ===============================================================
# == Components (전체 기능 최종 통합본)
# ===============================================================
components:
  # -------------------- Security Schemes --------------------
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "로그인 시 발급받은 JWT 토큰을 'Bearer {token}' 형식으로 입력하세요."

  # -------------------- Schemas (모든 모델/요청/응답) --------------------
  schemas:
    # -------------------- User Schemas --------------------
    User:
      type: object
      description: 사용자 정보 스키마 (DB 모델 기준)
      properties:
        user_id:
          type: integer
          description: "사용자 고유 ID"
          readOnly: true
        user_email:
          type: string
          format: email
        user_name:
          type: string
        user_gender:
          type: string
        state:
          type: string
          description: "사용자의 현재 감정 상태 (예: 행복, 슬픔, 중립)"
          nullable: true
        created_at:
          type: string
          format: date-time
          description: "계정 생성일"
          readOnly: true

    UserRegisterRequest:
      type: object
      description: 회원가입 요청 시 Body에 포함될 데이터
      required:
        - user_name
        - user_email
        - password
        - user_gender
      properties:
        user_name:
          type: string
          example: "김Inner"
        user_email:
          type: string
          format: email
          example: "innerecho@example.com"
        password:
          type: string
          format: password
          description: "암호화되어 저장될 사용자 비밀번호"
          example: "password123!"
        user_gender:
          type: string
          example: "남성"

    UserLoginRequest:
      type: object
      description: 로그인 요청 시 Body에 포함될 데이터
      required:
        - user_email
        - password
      properties:
        user_email:
          type: string
          format: email
          example: "innerecho@example.com"
        password:
          type: string
          format: password
          example: "password123!"

    DecodedToken:
      type: object
      description: JWT 토큰을 디코딩했을 때 얻을 수 있는 사용자 정보 페이로드
      properties:
        userId:
          type: integer
        userEmail:
          type: string
          format: email
        userName:
          type: string
        state:
          type: string
          nullable: true

    # -------------------- Plant & Chat Schemas --------------------
    UserPlant:
      type: object
      description: 사용자가 소유한 식물 정보 스키마 (DB 모델 기준)
      properties:
        plantId:
          type: integer
          readOnly: true
        user_id:
          type: integer
        species_id:
          type: integer
        nickname:
          type: string
          description: "식물의 애칭"
          example: "금쪽이"
        plant_level:
          type: integer
          description: "식물 레벨"
          example: 1
        plant_experience:
          type: integer
          description: "식물 경험치"
          example: 50
        plant_hogamdo:
          type: integer
          description: "식물과의 호감도"
          example: 10
        last_measured_date:
          type: string
          format: date-time
          description: "마지막으로 상태를 측정한 날짜"

    ChatHistory:
      type: object
      description: 채팅 기록 스키마 (DB 모델 기준)
      properties:
        history_id:
          type: integer
          readOnly: true
        message:
          type: string
        user_id:
          type: integer
        plantId:
          type: integer
        send_date:
          type: string
          format: date-time
        user_type:
          type: string
          enum: [User, Bot]
          description: "메시지 발신자 (사용자 또는 챗봇)"

    ChatRequest:
      type: object
      description: |
        챗봇에게 메시지 전송 시 Body에 포함될 데이터.
        userId는 Access Token에서 자동으로 추출됩니다.
      required:
        - plantId
        - message
      properties:
        plantId:
          type: integer
          description: "대화할 식물 ID"
          example: 1
        message:
          type: string
          description: "사용자가 입력한 메시지"
          example: "오늘 하루 어땠어?"
        emotion:
          type: string
          description: "(선택) 사용자의 현재 감정 상태. 챗봇 답변에 영향을 줄 수 있습니다."
          nullable: true
          example: "행복"

    # -------------------- Diary Schemas --------------------
    GrowthDiary:
      type: object
      description: 성장 일기 스키마 (DB 모델 기준)
      properties:
        diary_id:
          type: integer
          readOnly: true
        user_id:
          type: integer
        title:
          type: string
          example: "금쪽이와의 하루"
        content:
          type: string
          example: "오늘 금쪽이와 많은 이야기를 나누었다. 행복한 하루였다."
        image_url:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_deleted:
          type: boolean
        edited:
          type: boolean

    DiaryCreateRequest:
      type: object
      description: |
        일기 생성 요청 데이터.
        userId는 Access Token에서 자동으로 추출됩니다.
      required: [plantId, message]
      properties:
        plantId:
          type: integer
          example: 1
        message:
          type: string
          example: "오늘 하루를 일기로 만들어줘."

    # -------------------- Comment Schemas --------------------
    GrowthDiaryComment:
      type: object
      description: 성장 일기 댓글 스키마 (DB 모델 기준)
      properties:
        comment_id:
          type: integer
        diary_id:
          type: integer
        user_id:
          type: integer
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CommentCreateRequest:
      type: object
      description: |
        댓글 생성 요청 데이터.
        userId와 diaryId는 토큰 및 URL에서 자동으로 추출됩니다.
      required: [content]
      properties:
        content:
          type: string
          description: "댓글 내용"
          example: "좋은 글이네요!"

    CommentUpdateRequest:
      type: object
      description: |
        댓글 수정 요청 데이터.
        userId, diaryId, commentId는 토큰 및 URL에서 자동으로 추출됩니다.
      required: [content]
      properties:
        content:
          type: string
          description: "수정할 댓글 내용"
          example: "수정된 댓글 내용입니다!"

    CommentDeleteRequest:
      type: object
      description: |
        댓글 삭제 요청 데이터.
        userId, diaryId, commentId는 토큰 및 URL에서 자동으로 추출됩니다.
        요청 body가 필요 없습니다.

    # -------------------- Response Schemas --------------------
    UserResponse:
      type: object
      description: 사용자 관련 API의 기본 성공 응답
      properties:
        code:
          type: integer
          example: 200
        data:
          $ref: '#/components/schemas/User'
        msg:
          type: string
          example: "Ok"

    TokenResponse:
      type: object
      description: 로그인 성공 시 반환되는 JWT 토큰 응답
      properties:
        code:
          type: integer
          example: 200
        data:
          type: string
          description: "API 인증에 사용될 JWT Access Token"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE2MTYyMzkwMjJ9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        msg:
          type: string
          example: "Ok"

    PlantStateResponse:
      type: object
      description: 식물 상태 조회 성공 응답
      properties:
        code:
          type: integer
          example: 200
        data:
          type: object
          properties:
            plantName:
              type: string
              description: "식물 애칭"
              example: "금쪽이"
            level:
              type: integer
              example: 1
            experience:
              type: integer
              example: 50
            likeability:
              type: integer
              description: "호감도"
              example: 10
        msg:
          type: string
          example: "Ok"

    ChatResponse:
      type: object
      description: 챗봇 대화 성공 응답
      properties:
        code:
          type: integer
          example: 200
        data:
          type: object
          properties:
            userId:
              type: integer
              example: 1
            plantId:
              type: integer
              example: 1
            message:
              type: string
              description: "챗봇의 응답 메시지"
              example: "오늘 하루도 정말 즐거웠어요! 주인님은 어떠셨나요?"
            userType:
              type: string
              example: "Bot"
            sendDate:
              type: string
              format: date-time
        msg:
          type: string
          example: "Ok"

    DiaryResponse:
      type: object
      description: 일기 생성 및 조회 성공 응답
      properties:
        code:
          type: integer
          example: 200
        data:
          $ref: '#/components/schemas/GrowthDiary'
        msg:
          type: string
          example: "Ok"

    CommentResponse:
      type: object
      description: 댓글 생성 및 수정 성공 응답
      properties:
        code:
          type: integer
          example: 200
        data:
          $ref: '#/components/schemas/GrowthDiaryComment'
        msg:
          type: string
          example: "Ok"

    ErrorResponse:
      type: object
      description: API 실패 시 공통 응답
      properties:
        code:
          type: integer
        msg:
          type: string
    FriendRequest:
      type: object
      required: [fromUserId, toUserId]
      properties:
        fromUserId:
          type: integer
          description: "요청을 보내는 사용자 ID"
        toUserId:
          type: integer
          description: "요청을 받는 사용자 ID"

    FriendInfo:
      type: object
      description: 친구 목록에 표시될 사용자 정보
      properties:
        userId:
          type: integer
        userName:
          type: string
        state:
          type: string
          description: "친구의 현재 감정 상태"

    Mission:
      type: object
      properties:
        missionId:
          type: integer
        content:
          type: string
          example: "식물에게 말 걸기"
        isCompleted:
          type: boolean

    MissionResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        data:
          $ref: '#/components/schemas/Mission'
        msg:
          type: string
          example: "Ok"

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        msg:
          type: string


  # -------------------- Responses (공통 응답) --------------------
  responses:
    ServerError:
      description: 서버 내부 오류
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 500
            msg: "ServerError"
            
    UnauthorizedError:
      description: 인증 실패 (토큰이 없거나 유효하지 않음)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 401
            msg: "유효하지 않은 토큰입니다."